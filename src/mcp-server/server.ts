/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { SpeakeasyBarCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$authenticationAuthenticate } from "./tools/authenticationAuthenticate.js";
import { tool$configurationSubscribeToWebhooks } from "./tools/configurationSubscribeToWebhooks.js";
import { tool$drinksDelete } from "./tools/drinksDelete.js";
import { tool$drinksGetById } from "./tools/drinksGetById.js";
import { tool$drinksUpdate } from "./tools/drinksUpdate.js";
import { tool$drinksUpdateMultipart } from "./tools/drinksUpdateMultipart.js";
import { tool$drinksUpdateRaw } from "./tools/drinksUpdateRaw.js";
import { tool$drinksUpdateString } from "./tools/drinksUpdateString.js";
import { tool$ingredientsGet } from "./tools/ingredientsGet.js";
import { tool$ordersCreate } from "./tools/ordersCreate.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  apiKey?: SDKOptions["apiKey"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
  organization?: SDKOptions["organization"] | undefined;
  environment?: SDKOptions["environment"] | undefined;
}) {
  const server = new McpServer({
    name: "SpeakeasyBar",
    version: "0.1.11",
  });

  const client = new SpeakeasyBarCore({
    apiKey: deps.apiKey,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
    organization: deps.organization,
    environment: deps.environment,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$authenticationAuthenticate);
  tool(tool$drinksGetById);
  tool(tool$drinksUpdate);
  tool(tool$drinksUpdateString);
  tool(tool$drinksUpdateRaw);
  tool(tool$drinksUpdateMultipart);
  tool(tool$drinksDelete);
  tool(tool$ingredientsGet);
  tool(tool$ordersCreate);
  tool(tool$configurationSubscribeToWebhooks);

  return server;
}
