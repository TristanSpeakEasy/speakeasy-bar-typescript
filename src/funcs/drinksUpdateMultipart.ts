/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SpeakeasyBarCore } from "../core.js";
import { appendForm, encodeSimple } from "../lib/encodings.js";
import {
  getContentTypeFromFileName,
  readableStreamToArrayBuffer,
} from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { SpeakeasyBarError } from "../models/errors/speakeasybarerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

export enum UpdateMultipartAcceptEnum {
  applicationJson = "application/json",
  applicationXml = "application/xml",
}

/**
 * Update a drink.
 *
 * @remarks
 * Update a drink. Only available when authenticated.
 */
export function drinksUpdateMultipart(
  client: SpeakeasyBarCore,
  request: operations.UpdateDrinkMultipartRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: UpdateMultipartAcceptEnum;
  },
): APIPromise<
  Result<
    operations.UpdateDrinkMultipartResponse,
    | errors.APIError
    | SpeakeasyBarError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: SpeakeasyBarCore,
  request: operations.UpdateDrinkMultipartRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: UpdateMultipartAcceptEnum;
  },
): Promise<
  [
    Result<
      operations.UpdateDrinkMultipartResponse,
      | errors.APIError
      | SpeakeasyBarError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.UpdateDrinkMultipartRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = new FormData();

  if (payload.RequestBody.name !== undefined) {
    appendForm(body, "name", payload.RequestBody.name);
  }
  if (payload.RequestBody.photo !== undefined) {
    if (isBlobLike(payload.RequestBody.photo)) {
      appendForm(body, "photo", payload.RequestBody.photo);
    } else if (isReadableStream(payload.RequestBody.photo.content)) {
      const buffer = await readableStreamToArrayBuffer(
        payload.RequestBody.photo.content,
      );
      const contentType =
        getContentTypeFromFileName(payload.RequestBody.photo.fileName)
        || "application/octet-stream";
      const blob = new Blob([buffer], { type: contentType });
      appendForm(body, "photo", blob, payload.RequestBody.photo.fileName);
    } else {
      const contentType =
        getContentTypeFromFileName(payload.RequestBody.photo.fileName)
        || "application/octet-stream";
      appendForm(
        body,
        "photo",
        new Blob([payload.RequestBody.photo.content], { type: contentType }),
        payload.RequestBody.photo.fileName,
      );
    }
  }
  if (payload.RequestBody.price !== undefined) {
    appendForm(body, "price", payload.RequestBody.price);
  }
  if (payload.RequestBody.type !== undefined) {
    appendForm(body, "type", payload.RequestBody.type);
  }

  const pathParams = {
    productCode: encodeSimple("productCode", payload.productCode, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/drinks/{productCode}")(pathParams);

  const headers = new Headers(compactMap({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, application/xml;q=0",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "updateDrink_multipart",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "PATCH",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.UpdateDrinkMultipartResponse,
    | errors.APIError
    | SpeakeasyBarError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, operations.UpdateDrinkMultipartResponse$inboundSchema),
    M.bytes(200, operations.UpdateDrinkMultipartResponse$inboundSchema, {
      ctype: "application/xml",
    }),
    M.fail("4XX"),
    M.jsonErr("5XX", errors.APIError$inboundSchema),
    M.json("default", operations.UpdateDrinkMultipartResponse$inboundSchema),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
