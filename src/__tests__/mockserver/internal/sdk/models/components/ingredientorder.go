// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type IngredientOrderOrderType string

const (
	IngredientOrderOrderTypeIngredient IngredientOrderOrderType = "ingredient"
)

func (e IngredientOrderOrderType) ToPointer() *IngredientOrderOrderType {
	return &e
}
func (e *IngredientOrderOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ingredient":
		*e = IngredientOrderOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IngredientOrderOrderType: %v", v)
	}
}

// IngredientOrderStatus - The status of the order.
type IngredientOrderStatus string

const (
	IngredientOrderStatusPending    IngredientOrderStatus = "pending"
	IngredientOrderStatusProcessing IngredientOrderStatus = "processing"
	IngredientOrderStatusComplete   IngredientOrderStatus = "complete"
)

func (e IngredientOrderStatus) ToPointer() *IngredientOrderStatus {
	return &e
}
func (e *IngredientOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processing":
		fallthrough
	case "complete":
		*e = IngredientOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IngredientOrderStatus: %v", v)
	}
}

// IngredientOrder - An order for a drink or ingredient.
type IngredientOrder struct {
	OrderType IngredientOrderOrderType `json:"orderType"`
	// The product code of the drink or ingredient.
	ProductCode string `json:"productCode"`
	// The number of units of the drink or ingredient to order.
	Quantity int64 `json:"quantity"`
	// The status of the order.
	Status IngredientOrderStatus `json:"status"`
	// The address to deliver the ingredient to.
	DeliveryAddress *string `json:"deliveryAddress,omitempty"`
}

func (o *IngredientOrder) GetOrderType() IngredientOrderOrderType {
	if o == nil {
		return IngredientOrderOrderType("")
	}
	return o.OrderType
}

func (o *IngredientOrder) GetProductCode() string {
	if o == nil {
		return ""
	}
	return o.ProductCode
}

func (o *IngredientOrder) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *IngredientOrder) GetStatus() IngredientOrderStatus {
	if o == nil {
		return IngredientOrderStatus("")
	}
	return o.Status
}

func (o *IngredientOrder) GetDeliveryAddress() *string {
	if o == nil {
		return nil
	}
	return o.DeliveryAddress
}

// IngredientOrderInput - An order for a drink or ingredient.
type IngredientOrderInput struct {
	OrderType IngredientOrderOrderType `json:"orderType"`
	// The product code of the drink or ingredient.
	ProductCode string `json:"productCode"`
	// The number of units of the drink or ingredient to order.
	Quantity int64 `json:"quantity"`
	// The address to deliver the ingredient to.
	DeliveryAddress *string `json:"deliveryAddress,omitempty"`
}

func (o *IngredientOrderInput) GetOrderType() IngredientOrderOrderType {
	if o == nil {
		return IngredientOrderOrderType("")
	}
	return o.OrderType
}

func (o *IngredientOrderInput) GetProductCode() string {
	if o == nil {
		return ""
	}
	return o.ProductCode
}

func (o *IngredientOrderInput) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *IngredientOrderInput) GetDeliveryAddress() *string {
	if o == nil {
		return nil
	}
	return o.DeliveryAddress
}
