// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type DrinkOrderOrderType string

const (
	DrinkOrderOrderTypeDrink DrinkOrderOrderType = "drink"
)

func (e DrinkOrderOrderType) ToPointer() *DrinkOrderOrderType {
	return &e
}
func (e *DrinkOrderOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "drink":
		*e = DrinkOrderOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DrinkOrderOrderType: %v", v)
	}
}

// DrinkOrderStatus - The status of the order.
type DrinkOrderStatus string

const (
	DrinkOrderStatusPending    DrinkOrderStatus = "pending"
	DrinkOrderStatusProcessing DrinkOrderStatus = "processing"
	DrinkOrderStatusComplete   DrinkOrderStatus = "complete"
)

func (e DrinkOrderStatus) ToPointer() *DrinkOrderStatus {
	return &e
}
func (e *DrinkOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processing":
		fallthrough
	case "complete":
		*e = DrinkOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DrinkOrderStatus: %v", v)
	}
}

// BarCounter - The bar counter to collect the drink from.
type BarCounter string

const (
	BarCounterUpstairs BarCounter = "upstairs"
	BarCounterOutside  BarCounter = "outside"
	BarCounterLounge   BarCounter = "lounge"
)

func (e BarCounter) ToPointer() *BarCounter {
	return &e
}
func (e *BarCounter) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "upstairs":
		fallthrough
	case "outside":
		fallthrough
	case "lounge":
		*e = BarCounter(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BarCounter: %v", v)
	}
}

// DrinkOrder - An order for a drink or ingredient.
type DrinkOrder struct {
	OrderType DrinkOrderOrderType `json:"orderType"`
	// The product code of the drink or ingredient.
	ProductCode string `json:"productCode"`
	// The number of units of the drink or ingredient to order.
	Quantity int64 `json:"quantity"`
	// The status of the order.
	Status DrinkOrderStatus `json:"status"`
	// The bar counter to collect the drink from.
	BarCounter *BarCounter `json:"barCounter,omitempty"`
}

func (o *DrinkOrder) GetOrderType() DrinkOrderOrderType {
	if o == nil {
		return DrinkOrderOrderType("")
	}
	return o.OrderType
}

func (o *DrinkOrder) GetProductCode() string {
	if o == nil {
		return ""
	}
	return o.ProductCode
}

func (o *DrinkOrder) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *DrinkOrder) GetStatus() DrinkOrderStatus {
	if o == nil {
		return DrinkOrderStatus("")
	}
	return o.Status
}

func (o *DrinkOrder) GetBarCounter() *BarCounter {
	if o == nil {
		return nil
	}
	return o.BarCounter
}

// DrinkOrderInput - An order for a drink or ingredient.
type DrinkOrderInput struct {
	OrderType DrinkOrderOrderType `json:"orderType"`
	// The product code of the drink or ingredient.
	ProductCode string `json:"productCode"`
	// The number of units of the drink or ingredient to order.
	Quantity int64 `json:"quantity"`
	// The bar counter to collect the drink from.
	BarCounter *BarCounter `json:"barCounter,omitempty"`
}

func (o *DrinkOrderInput) GetOrderType() DrinkOrderOrderType {
	if o == nil {
		return DrinkOrderOrderType("")
	}
	return o.OrderType
}

func (o *DrinkOrderInput) GetProductCode() string {
	if o == nil {
		return ""
	}
	return o.ProductCode
}

func (o *DrinkOrderInput) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *DrinkOrderInput) GetBarCounter() *BarCounter {
	if o == nil {
		return nil
	}
	return o.BarCounter
}
