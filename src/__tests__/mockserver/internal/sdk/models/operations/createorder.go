// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type CreateOrderRequestBodyType string

const (
	CreateOrderRequestBodyTypeDrink      CreateOrderRequestBodyType = "drink"
	CreateOrderRequestBodyTypeIngredient CreateOrderRequestBodyType = "ingredient"
)

type CreateOrderRequestBody struct {
	DrinkOrderInput      *components.DrinkOrderInput      `queryParam:"inline"`
	IngredientOrderInput *components.IngredientOrderInput `queryParam:"inline"`

	Type CreateOrderRequestBodyType
}

func CreateCreateOrderRequestBodyDrink(drink components.DrinkOrderInput) CreateOrderRequestBody {
	typ := CreateOrderRequestBodyTypeDrink

	typStr := components.DrinkOrderOrderType(typ)
	drink.OrderType = typStr

	return CreateOrderRequestBody{
		DrinkOrderInput: &drink,
		Type:            typ,
	}
}

func CreateCreateOrderRequestBodyIngredient(ingredient components.IngredientOrderInput) CreateOrderRequestBody {
	typ := CreateOrderRequestBodyTypeIngredient

	typStr := components.IngredientOrderOrderType(typ)
	ingredient.OrderType = typStr

	return CreateOrderRequestBody{
		IngredientOrderInput: &ingredient,
		Type:                 typ,
	}
}

func (u *CreateOrderRequestBody) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		OrderType string `json:"orderType"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.OrderType {
	case "drink":
		drinkOrderInput := new(components.DrinkOrderInput)
		if err := utils.UnmarshalJSON(data, &drinkOrderInput, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (OrderType == drink) type components.DrinkOrderInput within CreateOrderRequestBody: %w", string(data), err)
		}

		u.DrinkOrderInput = drinkOrderInput
		u.Type = CreateOrderRequestBodyTypeDrink
		return nil
	case "ingredient":
		ingredientOrderInput := new(components.IngredientOrderInput)
		if err := utils.UnmarshalJSON(data, &ingredientOrderInput, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (OrderType == ingredient) type components.IngredientOrderInput within CreateOrderRequestBody: %w", string(data), err)
		}

		u.IngredientOrderInput = ingredientOrderInput
		u.Type = CreateOrderRequestBodyTypeIngredient
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateOrderRequestBody", string(data))
}

func (u CreateOrderRequestBody) MarshalJSON() ([]byte, error) {
	if u.DrinkOrderInput != nil {
		return utils.MarshalJSON(u.DrinkOrderInput, "", true)
	}

	if u.IngredientOrderInput != nil {
		return utils.MarshalJSON(u.IngredientOrderInput, "", true)
	}

	return nil, errors.New("could not marshal union type CreateOrderRequestBody: all fields are null")
}

type CreateOrderRequest struct {
	// The url to call when the order is updated.
	CallbackURL *string                `queryParam:"style=form,explode=true,name=callback_url"`
	RequestBody CreateOrderRequestBody `request:"mediaType=application/json"`
}

func (o *CreateOrderRequest) GetCallbackURL() *string {
	if o == nil {
		return nil
	}
	return o.CallbackURL
}

func (o *CreateOrderRequest) GetRequestBody() CreateOrderRequestBody {
	if o == nil {
		return CreateOrderRequestBody{}
	}
	return o.RequestBody
}

func (o *CreateOrderRequest) GetRequestBodyDrink() *components.DrinkOrderInput {
	return o.GetRequestBody().DrinkOrderInput
}

func (o *CreateOrderRequest) GetRequestBodyIngredient() *components.IngredientOrderInput {
	return o.GetRequestBody().IngredientOrderInput
}

type CreateOrderResponseBodyType string

const (
	CreateOrderResponseBodyTypeDrink      CreateOrderResponseBodyType = "drink"
	CreateOrderResponseBodyTypeIngredient CreateOrderResponseBodyType = "ingredient"
)

// CreateOrderResponseBody - The order was created successfully.
type CreateOrderResponseBody struct {
	DrinkOrder      *components.DrinkOrder      `queryParam:"inline"`
	IngredientOrder *components.IngredientOrder `queryParam:"inline"`

	Type CreateOrderResponseBodyType
}

func CreateCreateOrderResponseBodyDrink(drink components.DrinkOrder) CreateOrderResponseBody {
	typ := CreateOrderResponseBodyTypeDrink

	typStr := components.DrinkOrderOrderType(typ)
	drink.OrderType = typStr

	return CreateOrderResponseBody{
		DrinkOrder: &drink,
		Type:       typ,
	}
}

func CreateCreateOrderResponseBodyIngredient(ingredient components.IngredientOrder) CreateOrderResponseBody {
	typ := CreateOrderResponseBodyTypeIngredient

	typStr := components.IngredientOrderOrderType(typ)
	ingredient.OrderType = typStr

	return CreateOrderResponseBody{
		IngredientOrder: &ingredient,
		Type:            typ,
	}
}

func (u *CreateOrderResponseBody) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		OrderType string `json:"orderType"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.OrderType {
	case "drink":
		drinkOrder := new(components.DrinkOrder)
		if err := utils.UnmarshalJSON(data, &drinkOrder, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (OrderType == drink) type components.DrinkOrder within CreateOrderResponseBody: %w", string(data), err)
		}

		u.DrinkOrder = drinkOrder
		u.Type = CreateOrderResponseBodyTypeDrink
		return nil
	case "ingredient":
		ingredientOrder := new(components.IngredientOrder)
		if err := utils.UnmarshalJSON(data, &ingredientOrder, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (OrderType == ingredient) type components.IngredientOrder within CreateOrderResponseBody: %w", string(data), err)
		}

		u.IngredientOrder = ingredientOrder
		u.Type = CreateOrderResponseBodyTypeIngredient
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateOrderResponseBody", string(data))
}

func (u CreateOrderResponseBody) MarshalJSON() ([]byte, error) {
	if u.DrinkOrder != nil {
		return utils.MarshalJSON(u.DrinkOrder, "", true)
	}

	if u.IngredientOrder != nil {
		return utils.MarshalJSON(u.IngredientOrder, "", true)
	}

	return nil, errors.New("could not marshal union type CreateOrderResponseBody: all fields are null")
}

type CreateOrderResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The order was created successfully.
	OneOf *CreateOrderResponseBody
	Body  []byte
	// An unknown error occurred interacting with the API.
	Error *components.Error
}

func (o *CreateOrderResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateOrderResponse) GetOneOf() *CreateOrderResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}

func (o *CreateOrderResponse) GetOneOfDrink() *components.DrinkOrder {
	if v := o.GetOneOf(); v != nil {
		return v.DrinkOrder
	}
	return nil
}

func (o *CreateOrderResponse) GetOneOfIngredient() *components.IngredientOrder {
	if v := o.GetOneOf(); v != nil {
		return v.IngredientOrder
	}
	return nil
}

func (o *CreateOrderResponse) GetBody() []byte {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *CreateOrderResponse) GetError() *components.Error {
	if o == nil {
		return nil
	}
	return o.Error
}
