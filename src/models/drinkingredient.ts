/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An ingredient required to make a drink.
 */
export type DrinkIngredient = {
  /**
   * The product code of an ingredient, only available when authenticated.
   */
  ingredientProductCode: string;
  /**
   * The number of units of the ingredient required to make the drink.
   */
  quantity: number;
};

/** @internal */
export const DrinkIngredient$inboundSchema: z.ZodType<
  DrinkIngredient,
  z.ZodTypeDef,
  unknown
> = z.object({
  ingredientProductCode: z.string(),
  quantity: z.number().int(),
});

/** @internal */
export type DrinkIngredient$Outbound = {
  ingredientProductCode: string;
  quantity: number;
};

/** @internal */
export const DrinkIngredient$outboundSchema: z.ZodType<
  DrinkIngredient$Outbound,
  z.ZodTypeDef,
  DrinkIngredient
> = z.object({
  ingredientProductCode: z.string(),
  quantity: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrinkIngredient$ {
  /** @deprecated use `DrinkIngredient$inboundSchema` instead. */
  export const inboundSchema = DrinkIngredient$inboundSchema;
  /** @deprecated use `DrinkIngredient$outboundSchema` instead. */
  export const outboundSchema = DrinkIngredient$outboundSchema;
  /** @deprecated use `DrinkIngredient$Outbound` instead. */
  export type Outbound = DrinkIngredient$Outbound;
}

export function drinkIngredientToJSON(
  drinkIngredient: DrinkIngredient,
): string {
  return JSON.stringify(DrinkIngredient$outboundSchema.parse(drinkIngredient));
}

export function drinkIngredientFromJSON(
  jsonString: string,
): SafeParseResult<DrinkIngredient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrinkIngredient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrinkIngredient' from JSON`,
  );
}
