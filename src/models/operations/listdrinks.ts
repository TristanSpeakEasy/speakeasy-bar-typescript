/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListDrinksSecurity = {
  apiKey?: string | undefined;
};

export type ListDrinksRequest = {
  /**
   * The type of drink to filter by. If not provided all drinks will be returned.
   */
  type?: models.DrinkType | undefined;
};

export type ResponseBody =
  | (models.Drink & { dataLevel: "authenticated" })
  | (models.PublicDrink & { dataLevel: "unauthenticated" });

export type ListDrinksResponse =
  | models.ErrorT
  | Array<
    | (models.Drink & { dataLevel: "authenticated" })
    | (models.PublicDrink & { dataLevel: "unauthenticated" })
  >;

/** @internal */
export const ListDrinksSecurity$inboundSchema: z.ZodType<
  ListDrinksSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
});

/** @internal */
export type ListDrinksSecurity$Outbound = {
  apiKey?: string | undefined;
};

/** @internal */
export const ListDrinksSecurity$outboundSchema: z.ZodType<
  ListDrinksSecurity$Outbound,
  z.ZodTypeDef,
  ListDrinksSecurity
> = z.object({
  apiKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDrinksSecurity$ {
  /** @deprecated use `ListDrinksSecurity$inboundSchema` instead. */
  export const inboundSchema = ListDrinksSecurity$inboundSchema;
  /** @deprecated use `ListDrinksSecurity$outboundSchema` instead. */
  export const outboundSchema = ListDrinksSecurity$outboundSchema;
  /** @deprecated use `ListDrinksSecurity$Outbound` instead. */
  export type Outbound = ListDrinksSecurity$Outbound;
}

export function listDrinksSecurityToJSON(
  listDrinksSecurity: ListDrinksSecurity,
): string {
  return JSON.stringify(
    ListDrinksSecurity$outboundSchema.parse(listDrinksSecurity),
  );
}

export function listDrinksSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListDrinksSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDrinksSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDrinksSecurity' from JSON`,
  );
}

/** @internal */
export const ListDrinksRequest$inboundSchema: z.ZodType<
  ListDrinksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: models.DrinkType$inboundSchema.optional(),
});

/** @internal */
export type ListDrinksRequest$Outbound = {
  type?: string | undefined;
};

/** @internal */
export const ListDrinksRequest$outboundSchema: z.ZodType<
  ListDrinksRequest$Outbound,
  z.ZodTypeDef,
  ListDrinksRequest
> = z.object({
  type: models.DrinkType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDrinksRequest$ {
  /** @deprecated use `ListDrinksRequest$inboundSchema` instead. */
  export const inboundSchema = ListDrinksRequest$inboundSchema;
  /** @deprecated use `ListDrinksRequest$outboundSchema` instead. */
  export const outboundSchema = ListDrinksRequest$outboundSchema;
  /** @deprecated use `ListDrinksRequest$Outbound` instead. */
  export type Outbound = ListDrinksRequest$Outbound;
}

export function listDrinksRequestToJSON(
  listDrinksRequest: ListDrinksRequest,
): string {
  return JSON.stringify(
    ListDrinksRequest$outboundSchema.parse(listDrinksRequest),
  );
}

export function listDrinksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListDrinksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDrinksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDrinksRequest' from JSON`,
  );
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.Drink$inboundSchema.and(
    z.object({ dataLevel: z.literal("authenticated") }).transform((v) => ({
      dataLevel: v.dataLevel,
    })),
  ),
  models.PublicDrink$inboundSchema.and(
    z.object({ dataLevel: z.literal("unauthenticated") }).transform((v) => ({
      dataLevel: v.dataLevel,
    })),
  ),
]);

/** @internal */
export type ResponseBody$Outbound =
  | (models.Drink$Outbound & { dataLevel: "authenticated" })
  | (models.PublicDrink$Outbound & { dataLevel: "unauthenticated" });

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.union([
  models.Drink$outboundSchema.and(
    z.object({ dataLevel: z.literal("authenticated") }).transform((v) => ({
      dataLevel: v.dataLevel,
    })),
  ),
  models.PublicDrink$outboundSchema.and(
    z.object({ dataLevel: z.literal("unauthenticated") }).transform((v) => ({
      dataLevel: v.dataLevel,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}

export function responseBodyToJSON(responseBody: ResponseBody): string {
  return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}

export function responseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody' from JSON`,
  );
}

/** @internal */
export const ListDrinksResponse$inboundSchema: z.ZodType<
  ListDrinksResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(
    z.union([
      models.Drink$inboundSchema.and(
        z.object({ dataLevel: z.literal("authenticated") }).transform((v) => ({
          dataLevel: v.dataLevel,
        })),
      ),
      models.PublicDrink$inboundSchema.and(
        z.object({ dataLevel: z.literal("unauthenticated") }).transform((
          v,
        ) => ({ dataLevel: v.dataLevel })),
      ),
    ]),
  ),
]);

/** @internal */
export type ListDrinksResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<
    | (models.Drink$Outbound & { dataLevel: "authenticated" })
    | (models.PublicDrink$Outbound & { dataLevel: "unauthenticated" })
  >;

/** @internal */
export const ListDrinksResponse$outboundSchema: z.ZodType<
  ListDrinksResponse$Outbound,
  z.ZodTypeDef,
  ListDrinksResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(
    z.union([
      models.Drink$outboundSchema.and(
        z.object({ dataLevel: z.literal("authenticated") }).transform((v) => ({
          dataLevel: v.dataLevel,
        })),
      ),
      models.PublicDrink$outboundSchema.and(
        z.object({ dataLevel: z.literal("unauthenticated") }).transform((
          v,
        ) => ({ dataLevel: v.dataLevel })),
      ),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDrinksResponse$ {
  /** @deprecated use `ListDrinksResponse$inboundSchema` instead. */
  export const inboundSchema = ListDrinksResponse$inboundSchema;
  /** @deprecated use `ListDrinksResponse$outboundSchema` instead. */
  export const outboundSchema = ListDrinksResponse$outboundSchema;
  /** @deprecated use `ListDrinksResponse$Outbound` instead. */
  export type Outbound = ListDrinksResponse$Outbound;
}

export function listDrinksResponseToJSON(
  listDrinksResponse: ListDrinksResponse,
): string {
  return JSON.stringify(
    ListDrinksResponse$outboundSchema.parse(listDrinksResponse),
  );
}

export function listDrinksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListDrinksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDrinksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDrinksResponse' from JSON`,
  );
}
