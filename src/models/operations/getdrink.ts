/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetDrinkRequest = {
  productCode: string;
};

export type GetDrinkResponseResult = models.Drink | models.ErrorT;

export type GetDrinkResponse = {
  headers: { [k: string]: Array<string> };
  result: models.Drink | models.ErrorT;
};

/** @internal */
export const GetDrinkRequest$inboundSchema: z.ZodType<
  GetDrinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  productCode: z.string(),
});

/** @internal */
export type GetDrinkRequest$Outbound = {
  productCode: string;
};

/** @internal */
export const GetDrinkRequest$outboundSchema: z.ZodType<
  GetDrinkRequest$Outbound,
  z.ZodTypeDef,
  GetDrinkRequest
> = z.object({
  productCode: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrinkRequest$ {
  /** @deprecated use `GetDrinkRequest$inboundSchema` instead. */
  export const inboundSchema = GetDrinkRequest$inboundSchema;
  /** @deprecated use `GetDrinkRequest$outboundSchema` instead. */
  export const outboundSchema = GetDrinkRequest$outboundSchema;
  /** @deprecated use `GetDrinkRequest$Outbound` instead. */
  export type Outbound = GetDrinkRequest$Outbound;
}

export function getDrinkRequestToJSON(
  getDrinkRequest: GetDrinkRequest,
): string {
  return JSON.stringify(GetDrinkRequest$outboundSchema.parse(getDrinkRequest));
}

export function getDrinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDrinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrinkRequest' from JSON`,
  );
}

/** @internal */
export const GetDrinkResponseResult$inboundSchema: z.ZodType<
  GetDrinkResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([models.Drink$inboundSchema, models.ErrorT$inboundSchema]);

/** @internal */
export type GetDrinkResponseResult$Outbound =
  | models.Drink$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const GetDrinkResponseResult$outboundSchema: z.ZodType<
  GetDrinkResponseResult$Outbound,
  z.ZodTypeDef,
  GetDrinkResponseResult
> = z.union([models.Drink$outboundSchema, models.ErrorT$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrinkResponseResult$ {
  /** @deprecated use `GetDrinkResponseResult$inboundSchema` instead. */
  export const inboundSchema = GetDrinkResponseResult$inboundSchema;
  /** @deprecated use `GetDrinkResponseResult$outboundSchema` instead. */
  export const outboundSchema = GetDrinkResponseResult$outboundSchema;
  /** @deprecated use `GetDrinkResponseResult$Outbound` instead. */
  export type Outbound = GetDrinkResponseResult$Outbound;
}

export function getDrinkResponseResultToJSON(
  getDrinkResponseResult: GetDrinkResponseResult,
): string {
  return JSON.stringify(
    GetDrinkResponseResult$outboundSchema.parse(getDrinkResponseResult),
  );
}

export function getDrinkResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<GetDrinkResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrinkResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrinkResponseResult' from JSON`,
  );
}

/** @internal */
export const GetDrinkResponse$inboundSchema: z.ZodType<
  GetDrinkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([models.Drink$inboundSchema, models.ErrorT$inboundSchema]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetDrinkResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.Drink$Outbound | models.ErrorT$Outbound;
};

/** @internal */
export const GetDrinkResponse$outboundSchema: z.ZodType<
  GetDrinkResponse$Outbound,
  z.ZodTypeDef,
  GetDrinkResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([models.Drink$outboundSchema, models.ErrorT$outboundSchema]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrinkResponse$ {
  /** @deprecated use `GetDrinkResponse$inboundSchema` instead. */
  export const inboundSchema = GetDrinkResponse$inboundSchema;
  /** @deprecated use `GetDrinkResponse$outboundSchema` instead. */
  export const outboundSchema = GetDrinkResponse$outboundSchema;
  /** @deprecated use `GetDrinkResponse$Outbound` instead. */
  export type Outbound = GetDrinkResponse$Outbound;
}

export function getDrinkResponseToJSON(
  getDrinkResponse: GetDrinkResponse,
): string {
  return JSON.stringify(
    GetDrinkResponse$outboundSchema.parse(getDrinkResponse),
  );
}

export function getDrinkResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDrinkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrinkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrinkResponse' from JSON`,
  );
}
