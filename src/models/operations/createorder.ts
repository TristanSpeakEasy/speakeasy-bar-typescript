/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateOrderRequestBody =
  | (models.DrinkOrderInput & { orderType: "drink" })
  | (models.IngredientOrderInput & { orderType: "ingredient" });

export type CreateOrderRequest = {
  /**
   * The url to call when the order is updated.
   */
  callbackUrl?: string | undefined;
  requestBody:
    | (models.DrinkOrderInput & { orderType: "drink" })
    | (models.IngredientOrderInput & { orderType: "ingredient" });
};

/**
 * The order was created successfully.
 */
export type CreateOrderResponseBody =
  | (models.DrinkOrder & { orderType: "drink" })
  | (models.IngredientOrder & { orderType: "ingredient" });

export type CreateOrderResponse =
  | models.ErrorT
  | (models.DrinkOrder & { orderType: "drink" })
  | (models.IngredientOrder & { orderType: "ingredient" })
  | Uint8Array
  | string;

/** @internal */
export const CreateOrderRequestBody$inboundSchema: z.ZodType<
  CreateOrderRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.DrinkOrderInput$inboundSchema.and(
    z.object({ orderType: z.literal("drink") }).transform((v) => ({
      orderType: v.orderType,
    })),
  ),
  models.IngredientOrderInput$inboundSchema.and(
    z.object({ orderType: z.literal("ingredient") }).transform((v) => ({
      orderType: v.orderType,
    })),
  ),
]);

/** @internal */
export type CreateOrderRequestBody$Outbound =
  | (models.DrinkOrderInput$Outbound & { orderType: "drink" })
  | (models.IngredientOrderInput$Outbound & { orderType: "ingredient" });

/** @internal */
export const CreateOrderRequestBody$outboundSchema: z.ZodType<
  CreateOrderRequestBody$Outbound,
  z.ZodTypeDef,
  CreateOrderRequestBody
> = z.union([
  models.DrinkOrderInput$outboundSchema.and(
    z.object({ orderType: z.literal("drink") }).transform((v) => ({
      orderType: v.orderType,
    })),
  ),
  models.IngredientOrderInput$outboundSchema.and(
    z.object({ orderType: z.literal("ingredient") }).transform((v) => ({
      orderType: v.orderType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRequestBody$ {
  /** @deprecated use `CreateOrderRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRequestBody$inboundSchema;
  /** @deprecated use `CreateOrderRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRequestBody$outboundSchema;
  /** @deprecated use `CreateOrderRequestBody$Outbound` instead. */
  export type Outbound = CreateOrderRequestBody$Outbound;
}

export function createOrderRequestBodyToJSON(
  createOrderRequestBody: CreateOrderRequestBody,
): string {
  return JSON.stringify(
    CreateOrderRequestBody$outboundSchema.parse(createOrderRequestBody),
  );
}

export function createOrderRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateOrderRequest$inboundSchema: z.ZodType<
  CreateOrderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  callback_url: z.string().optional(),
  RequestBody: z.union([
    models.DrinkOrderInput$inboundSchema.and(
      z.object({ orderType: z.literal("drink") }).transform((v) => ({
        orderType: v.orderType,
      })),
    ),
    models.IngredientOrderInput$inboundSchema.and(
      z.object({ orderType: z.literal("ingredient") }).transform((v) => ({
        orderType: v.orderType,
      })),
    ),
  ]),
}).transform((v) => {
  return remap$(v, {
    "callback_url": "callbackUrl",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateOrderRequest$Outbound = {
  callback_url?: string | undefined;
  RequestBody:
    | (models.DrinkOrderInput$Outbound & { orderType: "drink" })
    | (models.IngredientOrderInput$Outbound & { orderType: "ingredient" });
};

/** @internal */
export const CreateOrderRequest$outboundSchema: z.ZodType<
  CreateOrderRequest$Outbound,
  z.ZodTypeDef,
  CreateOrderRequest
> = z.object({
  callbackUrl: z.string().optional(),
  requestBody: z.union([
    models.DrinkOrderInput$outboundSchema.and(
      z.object({ orderType: z.literal("drink") }).transform((v) => ({
        orderType: v.orderType,
      })),
    ),
    models.IngredientOrderInput$outboundSchema.and(
      z.object({ orderType: z.literal("ingredient") }).transform((v) => ({
        orderType: v.orderType,
      })),
    ),
  ]),
}).transform((v) => {
  return remap$(v, {
    callbackUrl: "callback_url",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRequest$ {
  /** @deprecated use `CreateOrderRequest$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRequest$inboundSchema;
  /** @deprecated use `CreateOrderRequest$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRequest$outboundSchema;
  /** @deprecated use `CreateOrderRequest$Outbound` instead. */
  export type Outbound = CreateOrderRequest$Outbound;
}

export function createOrderRequestToJSON(
  createOrderRequest: CreateOrderRequest,
): string {
  return JSON.stringify(
    CreateOrderRequest$outboundSchema.parse(createOrderRequest),
  );
}

export function createOrderRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRequest' from JSON`,
  );
}

/** @internal */
export const CreateOrderResponseBody$inboundSchema: z.ZodType<
  CreateOrderResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.DrinkOrder$inboundSchema.and(
    z.object({ orderType: z.literal("drink") }).transform((v) => ({
      orderType: v.orderType,
    })),
  ),
  models.IngredientOrder$inboundSchema.and(
    z.object({ orderType: z.literal("ingredient") }).transform((v) => ({
      orderType: v.orderType,
    })),
  ),
]);

/** @internal */
export type CreateOrderResponseBody$Outbound =
  | (models.DrinkOrder$Outbound & { orderType: "drink" })
  | (models.IngredientOrder$Outbound & { orderType: "ingredient" });

/** @internal */
export const CreateOrderResponseBody$outboundSchema: z.ZodType<
  CreateOrderResponseBody$Outbound,
  z.ZodTypeDef,
  CreateOrderResponseBody
> = z.union([
  models.DrinkOrder$outboundSchema.and(
    z.object({ orderType: z.literal("drink") }).transform((v) => ({
      orderType: v.orderType,
    })),
  ),
  models.IngredientOrder$outboundSchema.and(
    z.object({ orderType: z.literal("ingredient") }).transform((v) => ({
      orderType: v.orderType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderResponseBody$ {
  /** @deprecated use `CreateOrderResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrderResponseBody$inboundSchema;
  /** @deprecated use `CreateOrderResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrderResponseBody$outboundSchema;
  /** @deprecated use `CreateOrderResponseBody$Outbound` instead. */
  export type Outbound = CreateOrderResponseBody$Outbound;
}

export function createOrderResponseBodyToJSON(
  createOrderResponseBody: CreateOrderResponseBody,
): string {
  return JSON.stringify(
    CreateOrderResponseBody$outboundSchema.parse(createOrderResponseBody),
  );
}

export function createOrderResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateOrderResponse$inboundSchema: z.ZodType<
  CreateOrderResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.union([
    models.DrinkOrder$inboundSchema.and(
      z.object({ orderType: z.literal("drink") }).transform((v) => ({
        orderType: v.orderType,
      })),
    ),
    models.IngredientOrder$inboundSchema.and(
      z.object({ orderType: z.literal("ingredient") }).transform((v) => ({
        orderType: v.orderType,
      })),
    ),
  ]),
  b64$.zodInbound,
]);

/** @internal */
export type CreateOrderResponse$Outbound =
  | models.ErrorT$Outbound
  | (models.DrinkOrder$Outbound & { orderType: "drink" })
  | (models.IngredientOrder$Outbound & { orderType: "ingredient" })
  | Uint8Array;

/** @internal */
export const CreateOrderResponse$outboundSchema: z.ZodType<
  CreateOrderResponse$Outbound,
  z.ZodTypeDef,
  CreateOrderResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.union([
    models.DrinkOrder$outboundSchema.and(
      z.object({ orderType: z.literal("drink") }).transform((v) => ({
        orderType: v.orderType,
      })),
    ),
    models.IngredientOrder$outboundSchema.and(
      z.object({ orderType: z.literal("ingredient") }).transform((v) => ({
        orderType: v.orderType,
      })),
    ),
  ]),
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderResponse$ {
  /** @deprecated use `CreateOrderResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOrderResponse$inboundSchema;
  /** @deprecated use `CreateOrderResponse$outboundSchema` instead. */
  export const outboundSchema = CreateOrderResponse$outboundSchema;
  /** @deprecated use `CreateOrderResponse$Outbound` instead. */
  export type Outbound = CreateOrderResponse$Outbound;
}

export function createOrderResponseToJSON(
  createOrderResponse: CreateOrderResponse,
): string {
  return JSON.stringify(
    CreateOrderResponse$outboundSchema.parse(createOrderResponse),
  );
}

export function createOrderResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderResponse' from JSON`,
  );
}
