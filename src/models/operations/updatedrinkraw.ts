/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateDrinkRawRequest = {
  productCode: string;
  drink: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type UpdateDrinkRawResponse =
  | models.Drink
  | models.ErrorT
  | Uint8Array
  | string;

/** @internal */
export const UpdateDrinkRawRequest$inboundSchema: z.ZodType<
  UpdateDrinkRawRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  productCode: z.string(),
  Drink: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Drink": "drink",
  });
});

/** @internal */
export type UpdateDrinkRawRequest$Outbound = {
  productCode: string;
  Drink: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const UpdateDrinkRawRequest$outboundSchema: z.ZodType<
  UpdateDrinkRawRequest$Outbound,
  z.ZodTypeDef,
  UpdateDrinkRawRequest
> = z.object({
  productCode: z.string(),
  drink: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    drink: "Drink",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrinkRawRequest$ {
  /** @deprecated use `UpdateDrinkRawRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDrinkRawRequest$inboundSchema;
  /** @deprecated use `UpdateDrinkRawRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDrinkRawRequest$outboundSchema;
  /** @deprecated use `UpdateDrinkRawRequest$Outbound` instead. */
  export type Outbound = UpdateDrinkRawRequest$Outbound;
}

export function updateDrinkRawRequestToJSON(
  updateDrinkRawRequest: UpdateDrinkRawRequest,
): string {
  return JSON.stringify(
    UpdateDrinkRawRequest$outboundSchema.parse(updateDrinkRawRequest),
  );
}

export function updateDrinkRawRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrinkRawRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrinkRawRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrinkRawRequest' from JSON`,
  );
}

/** @internal */
export const UpdateDrinkRawResponse$inboundSchema: z.ZodType<
  UpdateDrinkRawResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.Drink$inboundSchema,
  models.ErrorT$inboundSchema,
  b64$.zodInbound,
]);

/** @internal */
export type UpdateDrinkRawResponse$Outbound =
  | models.Drink$Outbound
  | models.ErrorT$Outbound
  | Uint8Array;

/** @internal */
export const UpdateDrinkRawResponse$outboundSchema: z.ZodType<
  UpdateDrinkRawResponse$Outbound,
  z.ZodTypeDef,
  UpdateDrinkRawResponse
> = z.union([
  models.Drink$outboundSchema,
  models.ErrorT$outboundSchema,
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrinkRawResponse$ {
  /** @deprecated use `UpdateDrinkRawResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateDrinkRawResponse$inboundSchema;
  /** @deprecated use `UpdateDrinkRawResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateDrinkRawResponse$outboundSchema;
  /** @deprecated use `UpdateDrinkRawResponse$Outbound` instead. */
  export type Outbound = UpdateDrinkRawResponse$Outbound;
}

export function updateDrinkRawResponseToJSON(
  updateDrinkRawResponse: UpdateDrinkRawResponse,
): string {
  return JSON.stringify(
    UpdateDrinkRawResponse$outboundSchema.parse(updateDrinkRawResponse),
  );
}

export function updateDrinkRawResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrinkRawResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrinkRawResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrinkRawResponse' from JSON`,
  );
}
