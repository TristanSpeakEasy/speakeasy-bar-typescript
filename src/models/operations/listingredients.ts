/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DrinkIngredient = {};

export type ListIngredientsRequest = {
  /**
   * A list of ingredients to filter by. If not provided all ingredients will be returned.
   */
  ingredients?: Array<string> | undefined;
  /**
   * A list of drink ingredients to filter by. If not provided all ingredients will be returned.
   */
  drinkIngredients?: Array<DrinkIngredient> | undefined;
};

export type ListIngredientsResponse = models.ErrorT | Array<models.Ingredient>;

/** @internal */
export const DrinkIngredient$inboundSchema: z.ZodType<
  DrinkIngredient,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DrinkIngredient$Outbound = {};

/** @internal */
export const DrinkIngredient$outboundSchema: z.ZodType<
  DrinkIngredient$Outbound,
  z.ZodTypeDef,
  DrinkIngredient
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrinkIngredient$ {
  /** @deprecated use `DrinkIngredient$inboundSchema` instead. */
  export const inboundSchema = DrinkIngredient$inboundSchema;
  /** @deprecated use `DrinkIngredient$outboundSchema` instead. */
  export const outboundSchema = DrinkIngredient$outboundSchema;
  /** @deprecated use `DrinkIngredient$Outbound` instead. */
  export type Outbound = DrinkIngredient$Outbound;
}

export function drinkIngredientToJSON(
  drinkIngredient: DrinkIngredient,
): string {
  return JSON.stringify(DrinkIngredient$outboundSchema.parse(drinkIngredient));
}

export function drinkIngredientFromJSON(
  jsonString: string,
): SafeParseResult<DrinkIngredient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrinkIngredient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrinkIngredient' from JSON`,
  );
}

/** @internal */
export const ListIngredientsRequest$inboundSchema: z.ZodType<
  ListIngredientsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ingredients: z.array(z.string()).optional(),
  drinkIngredients: z.array(z.lazy(() => DrinkIngredient$inboundSchema))
    .optional(),
});

/** @internal */
export type ListIngredientsRequest$Outbound = {
  ingredients?: Array<string> | undefined;
  drinkIngredients?: Array<DrinkIngredient$Outbound> | undefined;
};

/** @internal */
export const ListIngredientsRequest$outboundSchema: z.ZodType<
  ListIngredientsRequest$Outbound,
  z.ZodTypeDef,
  ListIngredientsRequest
> = z.object({
  ingredients: z.array(z.string()).optional(),
  drinkIngredients: z.array(z.lazy(() => DrinkIngredient$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIngredientsRequest$ {
  /** @deprecated use `ListIngredientsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIngredientsRequest$inboundSchema;
  /** @deprecated use `ListIngredientsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIngredientsRequest$outboundSchema;
  /** @deprecated use `ListIngredientsRequest$Outbound` instead. */
  export type Outbound = ListIngredientsRequest$Outbound;
}

export function listIngredientsRequestToJSON(
  listIngredientsRequest: ListIngredientsRequest,
): string {
  return JSON.stringify(
    ListIngredientsRequest$outboundSchema.parse(listIngredientsRequest),
  );
}

export function listIngredientsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIngredientsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIngredientsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIngredientsRequest' from JSON`,
  );
}

/** @internal */
export const ListIngredientsResponse$inboundSchema: z.ZodType<
  ListIngredientsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(models.Ingredient$inboundSchema),
]);

/** @internal */
export type ListIngredientsResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<models.Ingredient$Outbound>;

/** @internal */
export const ListIngredientsResponse$outboundSchema: z.ZodType<
  ListIngredientsResponse$Outbound,
  z.ZodTypeDef,
  ListIngredientsResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(models.Ingredient$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIngredientsResponse$ {
  /** @deprecated use `ListIngredientsResponse$inboundSchema` instead. */
  export const inboundSchema = ListIngredientsResponse$inboundSchema;
  /** @deprecated use `ListIngredientsResponse$outboundSchema` instead. */
  export const outboundSchema = ListIngredientsResponse$outboundSchema;
  /** @deprecated use `ListIngredientsResponse$Outbound` instead. */
  export type Outbound = ListIngredientsResponse$Outbound;
}

export function listIngredientsResponseToJSON(
  listIngredientsResponse: ListIngredientsResponse,
): string {
  return JSON.stringify(
    ListIngredientsResponse$outboundSchema.parse(listIngredientsResponse),
  );
}

export function listIngredientsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListIngredientsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIngredientsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIngredientsResponse' from JSON`,
  );
}
