/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateDrinkRequest = {
  productCode: string;
  drink: models.DrinkInput;
};

export type UpdateDrinkResponse =
  | models.Drink
  | models.ErrorT
  | Uint8Array
  | string;

/** @internal */
export const UpdateDrinkRequest$inboundSchema: z.ZodType<
  UpdateDrinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  productCode: z.string(),
  Drink: models.DrinkInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Drink": "drink",
  });
});

/** @internal */
export type UpdateDrinkRequest$Outbound = {
  productCode: string;
  Drink: models.DrinkInput$Outbound;
};

/** @internal */
export const UpdateDrinkRequest$outboundSchema: z.ZodType<
  UpdateDrinkRequest$Outbound,
  z.ZodTypeDef,
  UpdateDrinkRequest
> = z.object({
  productCode: z.string(),
  drink: models.DrinkInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    drink: "Drink",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrinkRequest$ {
  /** @deprecated use `UpdateDrinkRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDrinkRequest$inboundSchema;
  /** @deprecated use `UpdateDrinkRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDrinkRequest$outboundSchema;
  /** @deprecated use `UpdateDrinkRequest$Outbound` instead. */
  export type Outbound = UpdateDrinkRequest$Outbound;
}

export function updateDrinkRequestToJSON(
  updateDrinkRequest: UpdateDrinkRequest,
): string {
  return JSON.stringify(
    UpdateDrinkRequest$outboundSchema.parse(updateDrinkRequest),
  );
}

export function updateDrinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrinkRequest' from JSON`,
  );
}

/** @internal */
export const UpdateDrinkResponse$inboundSchema: z.ZodType<
  UpdateDrinkResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.Drink$inboundSchema,
  models.ErrorT$inboundSchema,
  b64$.zodInbound,
]);

/** @internal */
export type UpdateDrinkResponse$Outbound =
  | models.Drink$Outbound
  | models.ErrorT$Outbound
  | Uint8Array;

/** @internal */
export const UpdateDrinkResponse$outboundSchema: z.ZodType<
  UpdateDrinkResponse$Outbound,
  z.ZodTypeDef,
  UpdateDrinkResponse
> = z.union([
  models.Drink$outboundSchema,
  models.ErrorT$outboundSchema,
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrinkResponse$ {
  /** @deprecated use `UpdateDrinkResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateDrinkResponse$inboundSchema;
  /** @deprecated use `UpdateDrinkResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateDrinkResponse$outboundSchema;
  /** @deprecated use `UpdateDrinkResponse$Outbound` instead. */
  export type Outbound = UpdateDrinkResponse$Outbound;
}

export function updateDrinkResponseToJSON(
  updateDrinkResponse: UpdateDrinkResponse,
): string {
  return JSON.stringify(
    UpdateDrinkResponse$outboundSchema.parse(updateDrinkResponse),
  );
}

export function updateDrinkResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrinkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrinkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrinkResponse' from JSON`,
  );
}
