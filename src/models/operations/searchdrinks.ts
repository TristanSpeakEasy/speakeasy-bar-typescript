/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SearchDrinksSecurity = {
  apiKey?: string | undefined;
};

export type SearchDrinksRequest = {
  /**
   * The search query.
   */
  query: string;
  /**
   * The type of drink to filter by. If not provided all drinks will be returned.
   */
  type?: models.DrinkType | undefined;
};

export type SearchDrinksResponse = models.ErrorT | Array<models.Drink>;

/** @internal */
export const SearchDrinksSecurity$inboundSchema: z.ZodType<
  SearchDrinksSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
});

/** @internal */
export type SearchDrinksSecurity$Outbound = {
  apiKey?: string | undefined;
};

/** @internal */
export const SearchDrinksSecurity$outboundSchema: z.ZodType<
  SearchDrinksSecurity$Outbound,
  z.ZodTypeDef,
  SearchDrinksSecurity
> = z.object({
  apiKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDrinksSecurity$ {
  /** @deprecated use `SearchDrinksSecurity$inboundSchema` instead. */
  export const inboundSchema = SearchDrinksSecurity$inboundSchema;
  /** @deprecated use `SearchDrinksSecurity$outboundSchema` instead. */
  export const outboundSchema = SearchDrinksSecurity$outboundSchema;
  /** @deprecated use `SearchDrinksSecurity$Outbound` instead. */
  export type Outbound = SearchDrinksSecurity$Outbound;
}

export function searchDrinksSecurityToJSON(
  searchDrinksSecurity: SearchDrinksSecurity,
): string {
  return JSON.stringify(
    SearchDrinksSecurity$outboundSchema.parse(searchDrinksSecurity),
  );
}

export function searchDrinksSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SearchDrinksSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchDrinksSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchDrinksSecurity' from JSON`,
  );
}

/** @internal */
export const SearchDrinksRequest$inboundSchema: z.ZodType<
  SearchDrinksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  type: models.DrinkType$inboundSchema.optional(),
});

/** @internal */
export type SearchDrinksRequest$Outbound = {
  query: string;
  type?: string | undefined;
};

/** @internal */
export const SearchDrinksRequest$outboundSchema: z.ZodType<
  SearchDrinksRequest$Outbound,
  z.ZodTypeDef,
  SearchDrinksRequest
> = z.object({
  query: z.string(),
  type: models.DrinkType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDrinksRequest$ {
  /** @deprecated use `SearchDrinksRequest$inboundSchema` instead. */
  export const inboundSchema = SearchDrinksRequest$inboundSchema;
  /** @deprecated use `SearchDrinksRequest$outboundSchema` instead. */
  export const outboundSchema = SearchDrinksRequest$outboundSchema;
  /** @deprecated use `SearchDrinksRequest$Outbound` instead. */
  export type Outbound = SearchDrinksRequest$Outbound;
}

export function searchDrinksRequestToJSON(
  searchDrinksRequest: SearchDrinksRequest,
): string {
  return JSON.stringify(
    SearchDrinksRequest$outboundSchema.parse(searchDrinksRequest),
  );
}

export function searchDrinksRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchDrinksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchDrinksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchDrinksRequest' from JSON`,
  );
}

/** @internal */
export const SearchDrinksResponse$inboundSchema: z.ZodType<
  SearchDrinksResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.array(models.Drink$inboundSchema)]);

/** @internal */
export type SearchDrinksResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<models.Drink$Outbound>;

/** @internal */
export const SearchDrinksResponse$outboundSchema: z.ZodType<
  SearchDrinksResponse$Outbound,
  z.ZodTypeDef,
  SearchDrinksResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(models.Drink$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDrinksResponse$ {
  /** @deprecated use `SearchDrinksResponse$inboundSchema` instead. */
  export const inboundSchema = SearchDrinksResponse$inboundSchema;
  /** @deprecated use `SearchDrinksResponse$outboundSchema` instead. */
  export const outboundSchema = SearchDrinksResponse$outboundSchema;
  /** @deprecated use `SearchDrinksResponse$Outbound` instead. */
  export type Outbound = SearchDrinksResponse$Outbound;
}

export function searchDrinksResponseToJSON(
  searchDrinksResponse: SearchDrinksResponse,
): string {
  return JSON.stringify(
    SearchDrinksResponse$outboundSchema.parse(searchDrinksResponse),
  );
}

export function searchDrinksResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchDrinksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchDrinksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchDrinksResponse' from JSON`,
  );
}
