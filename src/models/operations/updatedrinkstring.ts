/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateDrinkStringRequest = {
  productCode: string;
  requestBody: string;
};

export type UpdateDrinkStringResponse =
  | models.Drink
  | models.ErrorT
  | Uint8Array
  | string;

/** @internal */
export const UpdateDrinkStringRequest$inboundSchema: z.ZodType<
  UpdateDrinkStringRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  productCode: z.string(),
  RequestBody: z.string(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateDrinkStringRequest$Outbound = {
  productCode: string;
  RequestBody: string;
};

/** @internal */
export const UpdateDrinkStringRequest$outboundSchema: z.ZodType<
  UpdateDrinkStringRequest$Outbound,
  z.ZodTypeDef,
  UpdateDrinkStringRequest
> = z.object({
  productCode: z.string(),
  requestBody: z.string(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrinkStringRequest$ {
  /** @deprecated use `UpdateDrinkStringRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDrinkStringRequest$inboundSchema;
  /** @deprecated use `UpdateDrinkStringRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDrinkStringRequest$outboundSchema;
  /** @deprecated use `UpdateDrinkStringRequest$Outbound` instead. */
  export type Outbound = UpdateDrinkStringRequest$Outbound;
}

export function updateDrinkStringRequestToJSON(
  updateDrinkStringRequest: UpdateDrinkStringRequest,
): string {
  return JSON.stringify(
    UpdateDrinkStringRequest$outboundSchema.parse(updateDrinkStringRequest),
  );
}

export function updateDrinkStringRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrinkStringRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrinkStringRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrinkStringRequest' from JSON`,
  );
}

/** @internal */
export const UpdateDrinkStringResponse$inboundSchema: z.ZodType<
  UpdateDrinkStringResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.Drink$inboundSchema,
  models.ErrorT$inboundSchema,
  b64$.zodInbound,
]);

/** @internal */
export type UpdateDrinkStringResponse$Outbound =
  | models.Drink$Outbound
  | models.ErrorT$Outbound
  | Uint8Array;

/** @internal */
export const UpdateDrinkStringResponse$outboundSchema: z.ZodType<
  UpdateDrinkStringResponse$Outbound,
  z.ZodTypeDef,
  UpdateDrinkStringResponse
> = z.union([
  models.Drink$outboundSchema,
  models.ErrorT$outboundSchema,
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrinkStringResponse$ {
  /** @deprecated use `UpdateDrinkStringResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateDrinkStringResponse$inboundSchema;
  /** @deprecated use `UpdateDrinkStringResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateDrinkStringResponse$outboundSchema;
  /** @deprecated use `UpdateDrinkStringResponse$Outbound` instead. */
  export type Outbound = UpdateDrinkStringResponse$Outbound;
}

export function updateDrinkStringResponseToJSON(
  updateDrinkStringResponse: UpdateDrinkStringResponse,
): string {
  return JSON.stringify(
    UpdateDrinkStringResponse$outboundSchema.parse(updateDrinkStringResponse),
  );
}

export function updateDrinkStringResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrinkStringResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrinkStringResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrinkStringResponse' from JSON`,
  );
}
