/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthenticateRequest = {
  username?: string | undefined;
  password?: string | undefined;
};

/**
 * The api key to use for authenticated endpoints.
 */
export type AuthenticateResponseBody = {
  token?: string | undefined;
};

export type AuthenticateResponse = models.ErrorT | AuthenticateResponseBody;

/** @internal */
export const AuthenticateRequest$inboundSchema: z.ZodType<
  AuthenticateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string().optional(),
  password: z.string().optional(),
});

/** @internal */
export type AuthenticateRequest$Outbound = {
  username?: string | undefined;
  password?: string | undefined;
};

/** @internal */
export const AuthenticateRequest$outboundSchema: z.ZodType<
  AuthenticateRequest$Outbound,
  z.ZodTypeDef,
  AuthenticateRequest
> = z.object({
  username: z.string().optional(),
  password: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticateRequest$ {
  /** @deprecated use `AuthenticateRequest$inboundSchema` instead. */
  export const inboundSchema = AuthenticateRequest$inboundSchema;
  /** @deprecated use `AuthenticateRequest$outboundSchema` instead. */
  export const outboundSchema = AuthenticateRequest$outboundSchema;
  /** @deprecated use `AuthenticateRequest$Outbound` instead. */
  export type Outbound = AuthenticateRequest$Outbound;
}

export function authenticateRequestToJSON(
  authenticateRequest: AuthenticateRequest,
): string {
  return JSON.stringify(
    AuthenticateRequest$outboundSchema.parse(authenticateRequest),
  );
}

export function authenticateRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthenticateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthenticateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthenticateRequest' from JSON`,
  );
}

/** @internal */
export const AuthenticateResponseBody$inboundSchema: z.ZodType<
  AuthenticateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
});

/** @internal */
export type AuthenticateResponseBody$Outbound = {
  token?: string | undefined;
};

/** @internal */
export const AuthenticateResponseBody$outboundSchema: z.ZodType<
  AuthenticateResponseBody$Outbound,
  z.ZodTypeDef,
  AuthenticateResponseBody
> = z.object({
  token: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticateResponseBody$ {
  /** @deprecated use `AuthenticateResponseBody$inboundSchema` instead. */
  export const inboundSchema = AuthenticateResponseBody$inboundSchema;
  /** @deprecated use `AuthenticateResponseBody$outboundSchema` instead. */
  export const outboundSchema = AuthenticateResponseBody$outboundSchema;
  /** @deprecated use `AuthenticateResponseBody$Outbound` instead. */
  export type Outbound = AuthenticateResponseBody$Outbound;
}

export function authenticateResponseBodyToJSON(
  authenticateResponseBody: AuthenticateResponseBody,
): string {
  return JSON.stringify(
    AuthenticateResponseBody$outboundSchema.parse(authenticateResponseBody),
  );
}

export function authenticateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthenticateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthenticateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthenticateResponseBody' from JSON`,
  );
}

/** @internal */
export const AuthenticateResponse$inboundSchema: z.ZodType<
  AuthenticateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.lazy(() => AuthenticateResponseBody$inboundSchema),
]);

/** @internal */
export type AuthenticateResponse$Outbound =
  | models.ErrorT$Outbound
  | AuthenticateResponseBody$Outbound;

/** @internal */
export const AuthenticateResponse$outboundSchema: z.ZodType<
  AuthenticateResponse$Outbound,
  z.ZodTypeDef,
  AuthenticateResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.lazy(() => AuthenticateResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticateResponse$ {
  /** @deprecated use `AuthenticateResponse$inboundSchema` instead. */
  export const inboundSchema = AuthenticateResponse$inboundSchema;
  /** @deprecated use `AuthenticateResponse$outboundSchema` instead. */
  export const outboundSchema = AuthenticateResponse$outboundSchema;
  /** @deprecated use `AuthenticateResponse$Outbound` instead. */
  export type Outbound = AuthenticateResponse$Outbound;
}

export function authenticateResponseToJSON(
  authenticateResponse: AuthenticateResponse,
): string {
  return JSON.stringify(
    AuthenticateResponse$outboundSchema.parse(authenticateResponse),
  );
}

export function authenticateResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthenticateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthenticateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthenticateResponse' from JSON`,
  );
}
