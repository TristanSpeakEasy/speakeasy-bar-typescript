/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type Photo = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type UpdateDrinkMultipartRequestBody = {
  /**
   * The name of the drink.
   */
  name?: string | undefined;
  /**
   * The type of drink.
   */
  type?: models.DrinkType | undefined;
  /**
   * The price of one unit of the drink in US cents.
   */
  price?: number | undefined;
  /**
   * A photo of the drink.
   */
  photo?: Photo | Blob | undefined;
};

export type UpdateDrinkMultipartRequest = {
  productCode: string;
  requestBody: UpdateDrinkMultipartRequestBody;
};

export type UpdateDrinkMultipartResponse =
  | models.Drink
  | models.ErrorT
  | Uint8Array
  | string;

/** @internal */
export const Photo$inboundSchema: z.ZodType<Photo, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type Photo$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const Photo$outboundSchema: z.ZodType<
  Photo$Outbound,
  z.ZodTypeDef,
  Photo
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Photo$ {
  /** @deprecated use `Photo$inboundSchema` instead. */
  export const inboundSchema = Photo$inboundSchema;
  /** @deprecated use `Photo$outboundSchema` instead. */
  export const outboundSchema = Photo$outboundSchema;
  /** @deprecated use `Photo$Outbound` instead. */
  export type Outbound = Photo$Outbound;
}

export function photoToJSON(photo: Photo): string {
  return JSON.stringify(Photo$outboundSchema.parse(photo));
}

export function photoFromJSON(
  jsonString: string,
): SafeParseResult<Photo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Photo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Photo' from JSON`,
  );
}

/** @internal */
export const UpdateDrinkMultipartRequestBody$inboundSchema: z.ZodType<
  UpdateDrinkMultipartRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  type: models.DrinkType$inboundSchema.optional(),
  price: z.number().optional(),
  photo: z.lazy(() => Photo$inboundSchema).optional(),
});

/** @internal */
export type UpdateDrinkMultipartRequestBody$Outbound = {
  name?: string | undefined;
  type?: string | undefined;
  price?: number | undefined;
  photo?: Photo$Outbound | Blob | undefined;
};

/** @internal */
export const UpdateDrinkMultipartRequestBody$outboundSchema: z.ZodType<
  UpdateDrinkMultipartRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateDrinkMultipartRequestBody
> = z.object({
  name: z.string().optional(),
  type: models.DrinkType$outboundSchema.optional(),
  price: z.number().optional(),
  photo: z.lazy(() => Photo$outboundSchema).or(blobLikeSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrinkMultipartRequestBody$ {
  /** @deprecated use `UpdateDrinkMultipartRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateDrinkMultipartRequestBody$inboundSchema;
  /** @deprecated use `UpdateDrinkMultipartRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateDrinkMultipartRequestBody$outboundSchema;
  /** @deprecated use `UpdateDrinkMultipartRequestBody$Outbound` instead. */
  export type Outbound = UpdateDrinkMultipartRequestBody$Outbound;
}

export function updateDrinkMultipartRequestBodyToJSON(
  updateDrinkMultipartRequestBody: UpdateDrinkMultipartRequestBody,
): string {
  return JSON.stringify(
    UpdateDrinkMultipartRequestBody$outboundSchema.parse(
      updateDrinkMultipartRequestBody,
    ),
  );
}

export function updateDrinkMultipartRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrinkMultipartRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrinkMultipartRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrinkMultipartRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateDrinkMultipartRequest$inboundSchema: z.ZodType<
  UpdateDrinkMultipartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  productCode: z.string(),
  RequestBody: z.lazy(() => UpdateDrinkMultipartRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateDrinkMultipartRequest$Outbound = {
  productCode: string;
  RequestBody: UpdateDrinkMultipartRequestBody$Outbound;
};

/** @internal */
export const UpdateDrinkMultipartRequest$outboundSchema: z.ZodType<
  UpdateDrinkMultipartRequest$Outbound,
  z.ZodTypeDef,
  UpdateDrinkMultipartRequest
> = z.object({
  productCode: z.string(),
  requestBody: z.lazy(() => UpdateDrinkMultipartRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrinkMultipartRequest$ {
  /** @deprecated use `UpdateDrinkMultipartRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDrinkMultipartRequest$inboundSchema;
  /** @deprecated use `UpdateDrinkMultipartRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDrinkMultipartRequest$outboundSchema;
  /** @deprecated use `UpdateDrinkMultipartRequest$Outbound` instead. */
  export type Outbound = UpdateDrinkMultipartRequest$Outbound;
}

export function updateDrinkMultipartRequestToJSON(
  updateDrinkMultipartRequest: UpdateDrinkMultipartRequest,
): string {
  return JSON.stringify(
    UpdateDrinkMultipartRequest$outboundSchema.parse(
      updateDrinkMultipartRequest,
    ),
  );
}

export function updateDrinkMultipartRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrinkMultipartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrinkMultipartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrinkMultipartRequest' from JSON`,
  );
}

/** @internal */
export const UpdateDrinkMultipartResponse$inboundSchema: z.ZodType<
  UpdateDrinkMultipartResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.Drink$inboundSchema,
  models.ErrorT$inboundSchema,
  b64$.zodInbound,
]);

/** @internal */
export type UpdateDrinkMultipartResponse$Outbound =
  | models.Drink$Outbound
  | models.ErrorT$Outbound
  | Uint8Array;

/** @internal */
export const UpdateDrinkMultipartResponse$outboundSchema: z.ZodType<
  UpdateDrinkMultipartResponse$Outbound,
  z.ZodTypeDef,
  UpdateDrinkMultipartResponse
> = z.union([
  models.Drink$outboundSchema,
  models.ErrorT$outboundSchema,
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrinkMultipartResponse$ {
  /** @deprecated use `UpdateDrinkMultipartResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateDrinkMultipartResponse$inboundSchema;
  /** @deprecated use `UpdateDrinkMultipartResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateDrinkMultipartResponse$outboundSchema;
  /** @deprecated use `UpdateDrinkMultipartResponse$Outbound` instead. */
  export type Outbound = UpdateDrinkMultipartResponse$Outbound;
}

export function updateDrinkMultipartResponseToJSON(
  updateDrinkMultipartResponse: UpdateDrinkMultipartResponse,
): string {
  return JSON.stringify(
    UpdateDrinkMultipartResponse$outboundSchema.parse(
      updateDrinkMultipartResponse,
    ),
  );
}

export function updateDrinkMultipartResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrinkMultipartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrinkMultipartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrinkMultipartResponse' from JSON`,
  );
}
