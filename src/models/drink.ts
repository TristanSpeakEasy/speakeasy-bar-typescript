/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DrinkIngredient,
  DrinkIngredient$inboundSchema,
  DrinkIngredient$Outbound,
  DrinkIngredient$outboundSchema,
} from "./drinkingredient.js";
import {
  DrinkType,
  DrinkType$inboundSchema,
  DrinkType$outboundSchema,
} from "./drinktype.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The level of data included in the response.
 */
export const DrinkDataLevel = {
  Authenticated: "authenticated",
} as const;
/**
 * The level of data included in the response.
 */
export type DrinkDataLevel = ClosedEnum<typeof DrinkDataLevel>;

export type Drink = {
  /**
   * The name of the drink.
   */
  name: string;
  /**
   * The type of drink.
   */
  type?: DrinkType | undefined;
  /**
   * The price of one unit of the drink in US cents.
   */
  price: number;
  /**
   * A photo of the drink.
   */
  photo?: string | undefined;
  /**
   * The level of data included in the response.
   */
  dataLevel?: DrinkDataLevel | undefined;
  /**
   * The number of units of the drink in stock, only available when authenticated.
   */
  stock?: number | undefined;
  /**
   * The product code of a drink, only available when authenticated.
   */
  productCode: string;
  /**
   * The ingredients required to make the drink, only available when authenticated.
   */
  ingredients?: Array<DrinkIngredient> | undefined;
};

/** @internal */
export const DrinkDataLevel$inboundSchema: z.ZodNativeEnum<
  typeof DrinkDataLevel
> = z.nativeEnum(DrinkDataLevel);

/** @internal */
export const DrinkDataLevel$outboundSchema: z.ZodNativeEnum<
  typeof DrinkDataLevel
> = DrinkDataLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrinkDataLevel$ {
  /** @deprecated use `DrinkDataLevel$inboundSchema` instead. */
  export const inboundSchema = DrinkDataLevel$inboundSchema;
  /** @deprecated use `DrinkDataLevel$outboundSchema` instead. */
  export const outboundSchema = DrinkDataLevel$outboundSchema;
}

/** @internal */
export const Drink$inboundSchema: z.ZodType<Drink, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    type: DrinkType$inboundSchema.optional(),
    price: z.number(),
    photo: z.string().optional(),
    dataLevel: DrinkDataLevel$inboundSchema.optional(),
    stock: z.number().int().optional(),
    productCode: z.string(),
    ingredients: z.array(DrinkIngredient$inboundSchema).optional(),
  });

/** @internal */
export type Drink$Outbound = {
  name: string;
  type?: string | undefined;
  price: number;
  photo?: string | undefined;
  dataLevel?: string | undefined;
  stock?: number | undefined;
  productCode: string;
  ingredients?: Array<DrinkIngredient$Outbound> | undefined;
};

/** @internal */
export const Drink$outboundSchema: z.ZodType<
  Drink$Outbound,
  z.ZodTypeDef,
  Drink
> = z.object({
  name: z.string(),
  type: DrinkType$outboundSchema.optional(),
  price: z.number(),
  photo: z.string().optional(),
  dataLevel: DrinkDataLevel$outboundSchema.optional(),
  stock: z.number().int().optional(),
  productCode: z.string(),
  ingredients: z.array(DrinkIngredient$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Drink$ {
  /** @deprecated use `Drink$inboundSchema` instead. */
  export const inboundSchema = Drink$inboundSchema;
  /** @deprecated use `Drink$outboundSchema` instead. */
  export const outboundSchema = Drink$outboundSchema;
  /** @deprecated use `Drink$Outbound` instead. */
  export type Outbound = Drink$Outbound;
}

export function drinkToJSON(drink: Drink): string {
  return JSON.stringify(Drink$outboundSchema.parse(drink));
}

export function drinkFromJSON(
  jsonString: string,
): SafeParseResult<Drink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Drink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Drink' from JSON`,
  );
}
