/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  IngredientType,
  IngredientType$inboundSchema,
  IngredientType$outboundSchema,
} from "./ingredienttype.js";

export type IngredientInput = {
  /**
   * The name of the ingredient.
   */
  name: string;
  /**
   * The type of ingredient.
   */
  type: IngredientType;
  /**
   * The product code of an ingredient, only available when authenticated.
   */
  productCode?: string | undefined;
  /**
   * A photo of the ingredient.
   */
  photo?: string | undefined;
};

/** @internal */
export const IngredientInput$inboundSchema: z.ZodType<
  IngredientInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: IngredientType$inboundSchema,
  productCode: z.string().optional(),
  photo: z.string().optional(),
});

/** @internal */
export type IngredientInput$Outbound = {
  name: string;
  type: string;
  productCode?: string | undefined;
  photo?: string | undefined;
};

/** @internal */
export const IngredientInput$outboundSchema: z.ZodType<
  IngredientInput$Outbound,
  z.ZodTypeDef,
  IngredientInput
> = z.object({
  name: z.string(),
  type: IngredientType$outboundSchema,
  productCode: z.string().optional(),
  photo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngredientInput$ {
  /** @deprecated use `IngredientInput$inboundSchema` instead. */
  export const inboundSchema = IngredientInput$inboundSchema;
  /** @deprecated use `IngredientInput$outboundSchema` instead. */
  export const outboundSchema = IngredientInput$outboundSchema;
  /** @deprecated use `IngredientInput$Outbound` instead. */
  export type Outbound = IngredientInput$Outbound;
}

export function ingredientInputToJSON(
  ingredientInput: IngredientInput,
): string {
  return JSON.stringify(IngredientInput$outboundSchema.parse(ingredientInput));
}

export function ingredientInputFromJSON(
  jsonString: string,
): SafeParseResult<IngredientInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IngredientInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IngredientInput' from JSON`,
  );
}
