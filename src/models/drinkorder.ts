/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const DrinkOrderOrderType = {
  Drink: "drink",
} as const;
export type DrinkOrderOrderType = ClosedEnum<typeof DrinkOrderOrderType>;

/**
 * The status of the order.
 */
export const DrinkOrderStatus = {
  Pending: "pending",
  Processing: "processing",
  Complete: "complete",
} as const;
/**
 * The status of the order.
 */
export type DrinkOrderStatus = ClosedEnum<typeof DrinkOrderStatus>;

/**
 * The bar counter to collect the drink from.
 */
export const BarCounter = {
  Upstairs: "upstairs",
  Outside: "outside",
  Lounge: "lounge",
} as const;
/**
 * The bar counter to collect the drink from.
 */
export type BarCounter = ClosedEnum<typeof BarCounter>;

/**
 * An order for a drink or ingredient.
 */
export type DrinkOrder = {
  orderType: DrinkOrderOrderType;
  /**
   * The product code of the drink or ingredient.
   */
  productCode: string;
  /**
   * The number of units of the drink or ingredient to order.
   */
  quantity: number;
  /**
   * The status of the order.
   */
  status: DrinkOrderStatus;
  /**
   * The bar counter to collect the drink from.
   */
  barCounter?: BarCounter | undefined;
};

/**
 * An order for a drink or ingredient.
 */
export type DrinkOrderInput = {
  orderType: DrinkOrderOrderType;
  /**
   * The product code of the drink or ingredient.
   */
  productCode: string;
  /**
   * The number of units of the drink or ingredient to order.
   */
  quantity: number;
  /**
   * The bar counter to collect the drink from.
   */
  barCounter?: BarCounter | undefined;
};

/** @internal */
export const DrinkOrderOrderType$inboundSchema: z.ZodNativeEnum<
  typeof DrinkOrderOrderType
> = z.nativeEnum(DrinkOrderOrderType);

/** @internal */
export const DrinkOrderOrderType$outboundSchema: z.ZodNativeEnum<
  typeof DrinkOrderOrderType
> = DrinkOrderOrderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrinkOrderOrderType$ {
  /** @deprecated use `DrinkOrderOrderType$inboundSchema` instead. */
  export const inboundSchema = DrinkOrderOrderType$inboundSchema;
  /** @deprecated use `DrinkOrderOrderType$outboundSchema` instead. */
  export const outboundSchema = DrinkOrderOrderType$outboundSchema;
}

/** @internal */
export const DrinkOrderStatus$inboundSchema: z.ZodNativeEnum<
  typeof DrinkOrderStatus
> = z.nativeEnum(DrinkOrderStatus);

/** @internal */
export const DrinkOrderStatus$outboundSchema: z.ZodNativeEnum<
  typeof DrinkOrderStatus
> = DrinkOrderStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrinkOrderStatus$ {
  /** @deprecated use `DrinkOrderStatus$inboundSchema` instead. */
  export const inboundSchema = DrinkOrderStatus$inboundSchema;
  /** @deprecated use `DrinkOrderStatus$outboundSchema` instead. */
  export const outboundSchema = DrinkOrderStatus$outboundSchema;
}

/** @internal */
export const BarCounter$inboundSchema: z.ZodNativeEnum<typeof BarCounter> = z
  .nativeEnum(BarCounter);

/** @internal */
export const BarCounter$outboundSchema: z.ZodNativeEnum<typeof BarCounter> =
  BarCounter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BarCounter$ {
  /** @deprecated use `BarCounter$inboundSchema` instead. */
  export const inboundSchema = BarCounter$inboundSchema;
  /** @deprecated use `BarCounter$outboundSchema` instead. */
  export const outboundSchema = BarCounter$outboundSchema;
}

/** @internal */
export const DrinkOrder$inboundSchema: z.ZodType<
  DrinkOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderType: DrinkOrderOrderType$inboundSchema,
  productCode: z.string(),
  quantity: z.number().int(),
  status: DrinkOrderStatus$inboundSchema,
  barCounter: BarCounter$inboundSchema.optional(),
});

/** @internal */
export type DrinkOrder$Outbound = {
  orderType: string;
  productCode: string;
  quantity: number;
  status: string;
  barCounter?: string | undefined;
};

/** @internal */
export const DrinkOrder$outboundSchema: z.ZodType<
  DrinkOrder$Outbound,
  z.ZodTypeDef,
  DrinkOrder
> = z.object({
  orderType: DrinkOrderOrderType$outboundSchema,
  productCode: z.string(),
  quantity: z.number().int(),
  status: DrinkOrderStatus$outboundSchema,
  barCounter: BarCounter$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrinkOrder$ {
  /** @deprecated use `DrinkOrder$inboundSchema` instead. */
  export const inboundSchema = DrinkOrder$inboundSchema;
  /** @deprecated use `DrinkOrder$outboundSchema` instead. */
  export const outboundSchema = DrinkOrder$outboundSchema;
  /** @deprecated use `DrinkOrder$Outbound` instead. */
  export type Outbound = DrinkOrder$Outbound;
}

export function drinkOrderToJSON(drinkOrder: DrinkOrder): string {
  return JSON.stringify(DrinkOrder$outboundSchema.parse(drinkOrder));
}

export function drinkOrderFromJSON(
  jsonString: string,
): SafeParseResult<DrinkOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrinkOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrinkOrder' from JSON`,
  );
}

/** @internal */
export const DrinkOrderInput$inboundSchema: z.ZodType<
  DrinkOrderInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderType: DrinkOrderOrderType$inboundSchema,
  productCode: z.string(),
  quantity: z.number().int(),
  barCounter: BarCounter$inboundSchema.optional(),
});

/** @internal */
export type DrinkOrderInput$Outbound = {
  orderType: string;
  productCode: string;
  quantity: number;
  barCounter?: string | undefined;
};

/** @internal */
export const DrinkOrderInput$outboundSchema: z.ZodType<
  DrinkOrderInput$Outbound,
  z.ZodTypeDef,
  DrinkOrderInput
> = z.object({
  orderType: DrinkOrderOrderType$outboundSchema,
  productCode: z.string(),
  quantity: z.number().int(),
  barCounter: BarCounter$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrinkOrderInput$ {
  /** @deprecated use `DrinkOrderInput$inboundSchema` instead. */
  export const inboundSchema = DrinkOrderInput$inboundSchema;
  /** @deprecated use `DrinkOrderInput$outboundSchema` instead. */
  export const outboundSchema = DrinkOrderInput$outboundSchema;
  /** @deprecated use `DrinkOrderInput$Outbound` instead. */
  export type Outbound = DrinkOrderInput$Outbound;
}

export function drinkOrderInputToJSON(
  drinkOrderInput: DrinkOrderInput,
): string {
  return JSON.stringify(DrinkOrderInput$outboundSchema.parse(drinkOrderInput));
}

export function drinkOrderInputFromJSON(
  jsonString: string,
): SafeParseResult<DrinkOrderInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrinkOrderInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrinkOrderInput' from JSON`,
  );
}
