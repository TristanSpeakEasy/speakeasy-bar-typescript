/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DrinkType,
  DrinkType$inboundSchema,
  DrinkType$outboundSchema,
} from "./drinktype.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The level of data included in the response.
 */
export const PublicDrinkDataLevel = {
  Unauthenticated: "unauthenticated",
} as const;
/**
 * The level of data included in the response.
 */
export type PublicDrinkDataLevel = ClosedEnum<typeof PublicDrinkDataLevel>;

export type PublicDrink = {
  /**
   * The name of the drink.
   */
  name: string;
  /**
   * The type of drink.
   */
  type?: DrinkType | undefined;
  /**
   * The price of one unit of the drink in US cents.
   */
  price: number;
  /**
   * A photo of the drink.
   */
  photo?: string | undefined;
  /**
   * The level of data included in the response.
   */
  dataLevel?: PublicDrinkDataLevel | undefined;
};

/** @internal */
export const PublicDrinkDataLevel$inboundSchema: z.ZodNativeEnum<
  typeof PublicDrinkDataLevel
> = z.nativeEnum(PublicDrinkDataLevel);

/** @internal */
export const PublicDrinkDataLevel$outboundSchema: z.ZodNativeEnum<
  typeof PublicDrinkDataLevel
> = PublicDrinkDataLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicDrinkDataLevel$ {
  /** @deprecated use `PublicDrinkDataLevel$inboundSchema` instead. */
  export const inboundSchema = PublicDrinkDataLevel$inboundSchema;
  /** @deprecated use `PublicDrinkDataLevel$outboundSchema` instead. */
  export const outboundSchema = PublicDrinkDataLevel$outboundSchema;
}

/** @internal */
export const PublicDrink$inboundSchema: z.ZodType<
  PublicDrink,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: DrinkType$inboundSchema.optional(),
  price: z.number(),
  photo: z.string().optional(),
  dataLevel: PublicDrinkDataLevel$inboundSchema.optional(),
});

/** @internal */
export type PublicDrink$Outbound = {
  name: string;
  type?: string | undefined;
  price: number;
  photo?: string | undefined;
  dataLevel?: string | undefined;
};

/** @internal */
export const PublicDrink$outboundSchema: z.ZodType<
  PublicDrink$Outbound,
  z.ZodTypeDef,
  PublicDrink
> = z.object({
  name: z.string(),
  type: DrinkType$outboundSchema.optional(),
  price: z.number(),
  photo: z.string().optional(),
  dataLevel: PublicDrinkDataLevel$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicDrink$ {
  /** @deprecated use `PublicDrink$inboundSchema` instead. */
  export const inboundSchema = PublicDrink$inboundSchema;
  /** @deprecated use `PublicDrink$outboundSchema` instead. */
  export const outboundSchema = PublicDrink$outboundSchema;
  /** @deprecated use `PublicDrink$Outbound` instead. */
  export type Outbound = PublicDrink$Outbound;
}

export function publicDrinkToJSON(publicDrink: PublicDrink): string {
  return JSON.stringify(PublicDrink$outboundSchema.parse(publicDrink));
}

export function publicDrinkFromJSON(
  jsonString: string,
): SafeParseResult<PublicDrink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicDrink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicDrink' from JSON`,
  );
}
