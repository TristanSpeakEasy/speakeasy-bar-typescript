/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The type of order.
 */
export const OrderOrderType = {
  Drink: "drink",
  Ingredient: "ingredient",
} as const;
/**
 * The type of order.
 */
export type OrderOrderType = ClosedEnum<typeof OrderOrderType>;

/**
 * The status of the order.
 */
export const OrderStatus = {
  Pending: "pending",
  Processing: "processing",
  Complete: "complete",
} as const;
/**
 * The status of the order.
 */
export type OrderStatus = ClosedEnum<typeof OrderStatus>;

/**
 * An order for a drink or ingredient.
 */
export type Order = {
  /**
   * The type of order.
   */
  orderType: OrderOrderType;
  /**
   * The product code of the drink or ingredient.
   */
  productCode: string;
  /**
   * The number of units of the drink or ingredient to order.
   */
  quantity: number;
  /**
   * The status of the order.
   */
  status: OrderStatus;
};

/**
 * An order for a drink or ingredient.
 */
export type OrderInput = {
  /**
   * The type of order.
   */
  orderType: OrderOrderType;
  /**
   * The product code of the drink or ingredient.
   */
  productCode: string;
  /**
   * The number of units of the drink or ingredient to order.
   */
  quantity: number;
};

/** @internal */
export const OrderOrderType$inboundSchema: z.ZodNativeEnum<
  typeof OrderOrderType
> = z.nativeEnum(OrderOrderType);

/** @internal */
export const OrderOrderType$outboundSchema: z.ZodNativeEnum<
  typeof OrderOrderType
> = OrderOrderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderOrderType$ {
  /** @deprecated use `OrderOrderType$inboundSchema` instead. */
  export const inboundSchema = OrderOrderType$inboundSchema;
  /** @deprecated use `OrderOrderType$outboundSchema` instead. */
  export const outboundSchema = OrderOrderType$outboundSchema;
}

/** @internal */
export const OrderStatus$inboundSchema: z.ZodNativeEnum<typeof OrderStatus> = z
  .nativeEnum(OrderStatus);

/** @internal */
export const OrderStatus$outboundSchema: z.ZodNativeEnum<typeof OrderStatus> =
  OrderStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderStatus$ {
  /** @deprecated use `OrderStatus$inboundSchema` instead. */
  export const inboundSchema = OrderStatus$inboundSchema;
  /** @deprecated use `OrderStatus$outboundSchema` instead. */
  export const outboundSchema = OrderStatus$outboundSchema;
}

/** @internal */
export const Order$inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
  .object({
    orderType: OrderOrderType$inboundSchema,
    productCode: z.string(),
    quantity: z.number().int(),
    status: OrderStatus$inboundSchema,
  });

/** @internal */
export type Order$Outbound = {
  orderType: string;
  productCode: string;
  quantity: number;
  status: string;
};

/** @internal */
export const Order$outboundSchema: z.ZodType<
  Order$Outbound,
  z.ZodTypeDef,
  Order
> = z.object({
  orderType: OrderOrderType$outboundSchema,
  productCode: z.string(),
  quantity: z.number().int(),
  status: OrderStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
  /** @deprecated use `Order$Outbound` instead. */
  export type Outbound = Order$Outbound;
}

export function orderToJSON(order: Order): string {
  return JSON.stringify(Order$outboundSchema.parse(order));
}

export function orderFromJSON(
  jsonString: string,
): SafeParseResult<Order, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Order$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Order' from JSON`,
  );
}

/** @internal */
export const OrderInput$inboundSchema: z.ZodType<
  OrderInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderType: OrderOrderType$inboundSchema,
  productCode: z.string(),
  quantity: z.number().int(),
});

/** @internal */
export type OrderInput$Outbound = {
  orderType: string;
  productCode: string;
  quantity: number;
};

/** @internal */
export const OrderInput$outboundSchema: z.ZodType<
  OrderInput$Outbound,
  z.ZodTypeDef,
  OrderInput
> = z.object({
  orderType: OrderOrderType$outboundSchema,
  productCode: z.string(),
  quantity: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderInput$ {
  /** @deprecated use `OrderInput$inboundSchema` instead. */
  export const inboundSchema = OrderInput$inboundSchema;
  /** @deprecated use `OrderInput$outboundSchema` instead. */
  export const outboundSchema = OrderInput$outboundSchema;
  /** @deprecated use `OrderInput$Outbound` instead. */
  export type Outbound = OrderInput$Outbound;
}

export function orderInputToJSON(orderInput: OrderInput): string {
  return JSON.stringify(OrderInput$outboundSchema.parse(orderInput));
}

export function orderInputFromJSON(
  jsonString: string,
): SafeParseResult<OrderInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderInput' from JSON`,
  );
}
