/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { drinksDelete } from "../funcs/drinksDelete.js";
import { drinksGet } from "../funcs/drinksGet.js";
import { drinksGetById } from "../funcs/drinksGetById.js";
import { drinksSearch } from "../funcs/drinksSearch.js";
import { drinksStockUpdate } from "../funcs/drinksStockUpdate.js";
import { drinksUpdate, UpdateAcceptEnum } from "../funcs/drinksUpdate.js";
import {
  drinksUpdateMultipart,
  UpdateMultipartAcceptEnum,
} from "../funcs/drinksUpdateMultipart.js";
import {
  drinksUpdateRaw,
  UpdateRawAcceptEnum,
} from "../funcs/drinksUpdateRaw.js";
import {
  drinksUpdateString,
  UpdateStringAcceptEnum,
} from "../funcs/drinksUpdateString.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import * as webhooks from "../models/webhooks/index.js";
import { unwrapAsync } from "../types/fp.js";
import { WebhookRecipient } from "../types/webhooks.js";

export { UpdateAcceptEnum } from "../funcs/drinksUpdate.js";

export { UpdateStringAcceptEnum } from "../funcs/drinksUpdateString.js";

export { UpdateRawAcceptEnum } from "../funcs/drinksUpdateRaw.js";

export { UpdateMultipartAcceptEnum } from "../funcs/drinksUpdateMultipart.js";

export class Drinks extends ClientSDK {
  /**
   * Get a list of drinks.
   *
   * @remarks
   * Get a list of drinks, if authenticated this will include stock levels and product codes otherwise it will only include public information.
   */
  async get(
    request?: operations.ListDrinksRequest | undefined,
    security?: operations.ListDrinksSecurity | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListDrinksResponse> {
    return unwrapAsync(drinksGet(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Get a drink.
   *
   * @remarks
   * Get a drink by product code. Only available when authenticated.
   */
  async getById(
    request: operations.GetDrinkRequest,
    options?: RequestOptions,
  ): Promise<operations.GetDrinkResponse> {
    return unwrapAsync(drinksGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a drink.
   *
   * @remarks
   * Update a drink. Only available when authenticated.
   */
  async update(
    request: operations.UpdateDrinkRequest,
    options?: RequestOptions & { acceptHeaderOverride?: UpdateAcceptEnum },
  ): Promise<operations.UpdateDrinkResponse> {
    return unwrapAsync(drinksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a drink.
   *
   * @remarks
   * Update a drink. Only available when authenticated.
   */
  async updateString(
    request: operations.UpdateDrinkStringRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UpdateStringAcceptEnum;
    },
  ): Promise<operations.UpdateDrinkStringResponse> {
    return unwrapAsync(drinksUpdateString(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a drink.
   *
   * @remarks
   * Update a drink. Only available when authenticated.
   */
  async updateRaw(
    request: operations.UpdateDrinkRawRequest,
    options?: RequestOptions & { acceptHeaderOverride?: UpdateRawAcceptEnum },
  ): Promise<operations.UpdateDrinkRawResponse> {
    return unwrapAsync(drinksUpdateRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a drink.
   *
   * @remarks
   * Update a drink. Only available when authenticated.
   */
  async updateMultipart(
    request: operations.UpdateDrinkMultipartRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UpdateMultipartAcceptEnum;
    },
  ): Promise<operations.UpdateDrinkMultipartResponse> {
    return unwrapAsync(drinksUpdateMultipart(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a drink.
   *
   * @remarks
   * Delete a drink. Only available when authenticated.
   */
  async delete(
    request: operations.DeleteDrinkRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(drinksDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Search for drinks.
   *
   * @remarks
   * Search for drinks, if authenticated this will include stock levels and product codes otherwise it will only include public information.
   */
  async search(
    request: operations.SearchDrinksRequest,
    security?: operations.SearchDrinksSecurity | undefined,
    options?: RequestOptions,
  ): Promise<operations.SearchDrinksResponse> {
    return unwrapAsync(drinksSearch(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Receive stock updates.
   *
   * @remarks
   * Receive stock updates from the bar, this will be called whenever the stock levels of a drink or ingredient changes.
   */
  async stockUpdate(
    recipient: WebhookRecipient,
    request: webhooks.StockUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(drinksStockUpdate(
      this,
      recipient,
      request,
      options,
    ));
  }
}
