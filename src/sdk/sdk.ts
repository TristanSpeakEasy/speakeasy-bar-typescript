/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { validateWebhook } from "../funcs/validateWebhook.js";
import { ClientSDK } from "../lib/sdks.js";
import * as webhooks from "../models/webhooks/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Authentication } from "./authentication.js";
import { Configuration } from "./configuration.js";
import { Drinks } from "./drinks.js";
import { Ingredients } from "./ingredients.js";
import { Orders } from "./orders.js";

export class SpeakeasyBar extends ClientSDK {
  private _authentication?: Authentication;
  get authentication(): Authentication {
    return (this._authentication ??= new Authentication(this._options));
  }

  private _drinks?: Drinks;
  get drinks(): Drinks {
    return (this._drinks ??= new Drinks(this._options));
  }

  private _ingredients?: Ingredients;
  get ingredients(): Ingredients {
    return (this._ingredients ??= new Ingredients(this._options));
  }

  private _orders?: Orders;
  get orders(): Orders {
    return (this._orders ??= new Orders(this._options));
  }

  private _configuration?: Configuration;
  get configuration(): Configuration {
    return (this._configuration ??= new Configuration(this._options));
  }

  async validateWebhook({
    request,
  }: {
    request: {
      body: string;
      headers: Record<string, string> | Headers;
      url: string;
      method: string;
    } | Request;
  }): Promise<webhooks.StockUpdateRequest> {
    return unwrapAsync(validateWebhook(
      this,
      { request },
    ));
  }
}
